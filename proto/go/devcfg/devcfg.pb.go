// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.4
// source: devcfg/devcfg.proto

package devcfgpb

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type EthernetServiceType int32

const (
	EthernetServiceType_ETHERNET_SERVICE_TYPE_UNSPECIFIED EthernetServiceType = 0
	EthernetServiceType_ETHERNET_SERVICE_TYPE_ETHERNET    EthernetServiceType = 1
	EthernetServiceType_ETHERNET_SERVICE_TYPE_WIFI        EthernetServiceType = 2
)

// Enum value maps for EthernetServiceType.
var (
	EthernetServiceType_name = map[int32]string{
		0: "ETHERNET_SERVICE_TYPE_UNSPECIFIED",
		1: "ETHERNET_SERVICE_TYPE_ETHERNET",
		2: "ETHERNET_SERVICE_TYPE_WIFI",
	}
	EthernetServiceType_value = map[string]int32{
		"ETHERNET_SERVICE_TYPE_UNSPECIFIED": 0,
		"ETHERNET_SERVICE_TYPE_ETHERNET":    1,
		"ETHERNET_SERVICE_TYPE_WIFI":        2,
	}
)

func (x EthernetServiceType) Enum() *EthernetServiceType {
	p := new(EthernetServiceType)
	*p = x
	return p
}

func (x EthernetServiceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EthernetServiceType) Descriptor() protoreflect.EnumDescriptor {
	return file_devcfg_devcfg_proto_enumTypes[0].Descriptor()
}

func (EthernetServiceType) Type() protoreflect.EnumType {
	return &file_devcfg_devcfg_proto_enumTypes[0]
}

func (x EthernetServiceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EthernetServiceType.Descriptor instead.
func (EthernetServiceType) EnumDescriptor() ([]byte, []int) {
	return file_devcfg_devcfg_proto_rawDescGZIP(), []int{0}
}

type Ipv4ConfigType int32

const (
	Ipv4ConfigType_IPV4_CONFIG_TYPE_UNSPECIFIED Ipv4ConfigType = 0
	Ipv4ConfigType_IPV4_CONFIG_TYPE_OFF         Ipv4ConfigType = 1
	Ipv4ConfigType_IPV4_CONFIG_TYPE_DHCP        Ipv4ConfigType = 2
	Ipv4ConfigType_IPV4_CONFIG_TYPE_CUSTOM      Ipv4ConfigType = 3
)

// Enum value maps for Ipv4ConfigType.
var (
	Ipv4ConfigType_name = map[int32]string{
		0: "IPV4_CONFIG_TYPE_UNSPECIFIED",
		1: "IPV4_CONFIG_TYPE_OFF",
		2: "IPV4_CONFIG_TYPE_DHCP",
		3: "IPV4_CONFIG_TYPE_CUSTOM",
	}
	Ipv4ConfigType_value = map[string]int32{
		"IPV4_CONFIG_TYPE_UNSPECIFIED": 0,
		"IPV4_CONFIG_TYPE_OFF":         1,
		"IPV4_CONFIG_TYPE_DHCP":        2,
		"IPV4_CONFIG_TYPE_CUSTOM":      3,
	}
)

func (x Ipv4ConfigType) Enum() *Ipv4ConfigType {
	p := new(Ipv4ConfigType)
	*p = x
	return p
}

func (x Ipv4ConfigType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ipv4ConfigType) Descriptor() protoreflect.EnumDescriptor {
	return file_devcfg_devcfg_proto_enumTypes[1].Descriptor()
}

func (Ipv4ConfigType) Type() protoreflect.EnumType {
	return &file_devcfg_devcfg_proto_enumTypes[1]
}

func (x Ipv4ConfigType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ipv4ConfigType.Descriptor instead.
func (Ipv4ConfigType) EnumDescriptor() ([]byte, []int) {
	return file_devcfg_devcfg_proto_rawDescGZIP(), []int{1}
}

type Ipv6ConfigType int32

const (
	Ipv6ConfigType_IPV6_CONFIG_TYPE_UNSPECIFIED Ipv6ConfigType = 0
	Ipv6ConfigType_IPV6_CONFIG_TYPE_OFF         Ipv6ConfigType = 1
	Ipv6ConfigType_IPV6_CONFIG_TYPE_AUTO        Ipv6ConfigType = 2
	Ipv6ConfigType_IPV6_CONFIG_TYPE_CUSTOM      Ipv6ConfigType = 3
)

// Enum value maps for Ipv6ConfigType.
var (
	Ipv6ConfigType_name = map[int32]string{
		0: "IPV6_CONFIG_TYPE_UNSPECIFIED",
		1: "IPV6_CONFIG_TYPE_OFF",
		2: "IPV6_CONFIG_TYPE_AUTO",
		3: "IPV6_CONFIG_TYPE_CUSTOM",
	}
	Ipv6ConfigType_value = map[string]int32{
		"IPV6_CONFIG_TYPE_UNSPECIFIED": 0,
		"IPV6_CONFIG_TYPE_OFF":         1,
		"IPV6_CONFIG_TYPE_AUTO":        2,
		"IPV6_CONFIG_TYPE_CUSTOM":      3,
	}
)

func (x Ipv6ConfigType) Enum() *Ipv6ConfigType {
	p := new(Ipv6ConfigType)
	*p = x
	return p
}

func (x Ipv6ConfigType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ipv6ConfigType) Descriptor() protoreflect.EnumDescriptor {
	return file_devcfg_devcfg_proto_enumTypes[2].Descriptor()
}

func (Ipv6ConfigType) Type() protoreflect.EnumType {
	return &file_devcfg_devcfg_proto_enumTypes[2]
}

func (x Ipv6ConfigType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ipv6ConfigType.Descriptor instead.
func (Ipv6ConfigType) EnumDescriptor() ([]byte, []int) {
	return file_devcfg_devcfg_proto_rawDescGZIP(), []int{2}
}

type Ipv6Privacy int32

const (
	Ipv6Privacy_IPV6_PRIVACY_UNSPECIFIED Ipv6Privacy = 0
	Ipv6Privacy_IPV6_PRIVACY_DISABLED    Ipv6Privacy = 1
	Ipv6Privacy_IPV6_PRIVACY_ENABLED     Ipv6Privacy = 2
	Ipv6Privacy_IPV6_PRIVACY_PREFERRED   Ipv6Privacy = 3
)

// Enum value maps for Ipv6Privacy.
var (
	Ipv6Privacy_name = map[int32]string{
		0: "IPV6_PRIVACY_UNSPECIFIED",
		1: "IPV6_PRIVACY_DISABLED",
		2: "IPV6_PRIVACY_ENABLED",
		3: "IPV6_PRIVACY_PREFERRED",
	}
	Ipv6Privacy_value = map[string]int32{
		"IPV6_PRIVACY_UNSPECIFIED": 0,
		"IPV6_PRIVACY_DISABLED":    1,
		"IPV6_PRIVACY_ENABLED":     2,
		"IPV6_PRIVACY_PREFERRED":   3,
	}
)

func (x Ipv6Privacy) Enum() *Ipv6Privacy {
	p := new(Ipv6Privacy)
	*p = x
	return p
}

func (x Ipv6Privacy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ipv6Privacy) Descriptor() protoreflect.EnumDescriptor {
	return file_devcfg_devcfg_proto_enumTypes[3].Descriptor()
}

func (Ipv6Privacy) Type() protoreflect.EnumType {
	return &file_devcfg_devcfg_proto_enumTypes[3]
}

func (x Ipv6Privacy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ipv6Privacy.Descriptor instead.
func (Ipv6Privacy) EnumDescriptor() ([]byte, []int) {
	return file_devcfg_devcfg_proto_rawDescGZIP(), []int{3}
}

type Security int32

const (
	Security_SECURITY_UNSPECIFIED Security = 0
	Security_SECURITY_PSK         Security = 1
	Security_SECURITY_IEEE8021X   Security = 2
	Security_SECURITY_NONE        Security = 3
	Security_SECURITY_WEP         Security = 4
)

// Enum value maps for Security.
var (
	Security_name = map[int32]string{
		0: "SECURITY_UNSPECIFIED",
		1: "SECURITY_PSK",
		2: "SECURITY_IEEE8021X",
		3: "SECURITY_NONE",
		4: "SECURITY_WEP",
	}
	Security_value = map[string]int32{
		"SECURITY_UNSPECIFIED": 0,
		"SECURITY_PSK":         1,
		"SECURITY_IEEE8021X":   2,
		"SECURITY_NONE":        3,
		"SECURITY_WEP":         4,
	}
)

func (x Security) Enum() *Security {
	p := new(Security)
	*p = x
	return p
}

func (x Security) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Security) Descriptor() protoreflect.EnumDescriptor {
	return file_devcfg_devcfg_proto_enumTypes[4].Descriptor()
}

func (Security) Type() protoreflect.EnumType {
	return &file_devcfg_devcfg_proto_enumTypes[4]
}

func (x Security) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Security.Descriptor instead.
func (Security) EnumDescriptor() ([]byte, []int) {
	return file_devcfg_devcfg_proto_rawDescGZIP(), []int{4}
}

type Eap int32

const (
	Eap_EAP_TLS  Eap = 0
	Eap_EAP_TTLS Eap = 1
	Eap_EAP_PEAP Eap = 2
)

// Enum value maps for Eap.
var (
	Eap_name = map[int32]string{
		0: "EAP_TLS",
		1: "EAP_TTLS",
		2: "EAP_PEAP",
	}
	Eap_value = map[string]int32{
		"EAP_TLS":  0,
		"EAP_TTLS": 1,
		"EAP_PEAP": 2,
	}
)

func (x Eap) Enum() *Eap {
	p := new(Eap)
	*p = x
	return p
}

func (x Eap) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Eap) Descriptor() protoreflect.EnumDescriptor {
	return file_devcfg_devcfg_proto_enumTypes[5].Descriptor()
}

func (Eap) Type() protoreflect.EnumType {
	return &file_devcfg_devcfg_proto_enumTypes[5]
}

func (x Eap) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Eap.Descriptor instead.
func (Eap) EnumDescriptor() ([]byte, []int) {
	return file_devcfg_devcfg_proto_rawDescGZIP(), []int{5}
}

type CaCertType int32

const (
	CaCertType_CA_CERT_TYPE_UNSPECIFIED CaCertType = 0
	CaCertType_CA_CERT_TYPE_PEM         CaCertType = 1
	CaCertType_CA_CERT_TYPE_DER         CaCertType = 2
)

// Enum value maps for CaCertType.
var (
	CaCertType_name = map[int32]string{
		0: "CA_CERT_TYPE_UNSPECIFIED",
		1: "CA_CERT_TYPE_PEM",
		2: "CA_CERT_TYPE_DER",
	}
	CaCertType_value = map[string]int32{
		"CA_CERT_TYPE_UNSPECIFIED": 0,
		"CA_CERT_TYPE_PEM":         1,
		"CA_CERT_TYPE_DER":         2,
	}
)

func (x CaCertType) Enum() *CaCertType {
	p := new(CaCertType)
	*p = x
	return p
}

func (x CaCertType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CaCertType) Descriptor() protoreflect.EnumDescriptor {
	return file_devcfg_devcfg_proto_enumTypes[6].Descriptor()
}

func (CaCertType) Type() protoreflect.EnumType {
	return &file_devcfg_devcfg_proto_enumTypes[6]
}

func (x CaCertType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CaCertType.Descriptor instead.
func (CaCertType) EnumDescriptor() ([]byte, []int) {
	return file_devcfg_devcfg_proto_rawDescGZIP(), []int{6}
}

type PrivateKeyType int32

const (
	PrivateKeyType_PRIVATE_KEY_TYPE_UNSPECIFIED PrivateKeyType = 0
	PrivateKeyType_PRIVATE_KEY_TYPE_PEM         PrivateKeyType = 1
	PrivateKeyType_PRIVATE_KEY_TYPE_DER         PrivateKeyType = 2
	PrivateKeyType_PRIVATE_KEY_TYPE_PFX         PrivateKeyType = 3
)

// Enum value maps for PrivateKeyType.
var (
	PrivateKeyType_name = map[int32]string{
		0: "PRIVATE_KEY_TYPE_UNSPECIFIED",
		1: "PRIVATE_KEY_TYPE_PEM",
		2: "PRIVATE_KEY_TYPE_DER",
		3: "PRIVATE_KEY_TYPE_PFX",
	}
	PrivateKeyType_value = map[string]int32{
		"PRIVATE_KEY_TYPE_UNSPECIFIED": 0,
		"PRIVATE_KEY_TYPE_PEM":         1,
		"PRIVATE_KEY_TYPE_DER":         2,
		"PRIVATE_KEY_TYPE_PFX":         3,
	}
)

func (x PrivateKeyType) Enum() *PrivateKeyType {
	p := new(PrivateKeyType)
	*p = x
	return p
}

func (x PrivateKeyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PrivateKeyType) Descriptor() protoreflect.EnumDescriptor {
	return file_devcfg_devcfg_proto_enumTypes[7].Descriptor()
}

func (PrivateKeyType) Type() protoreflect.EnumType {
	return &file_devcfg_devcfg_proto_enumTypes[7]
}

func (x PrivateKeyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PrivateKeyType.Descriptor instead.
func (PrivateKeyType) EnumDescriptor() ([]byte, []int) {
	return file_devcfg_devcfg_proto_rawDescGZIP(), []int{7}
}

type PrivateKeyPassphraseType int32

const (
	PrivateKeyPassphraseType_PRIVATE_KEY_PASSPHRASE_TYPE_UNSPECIFIED PrivateKeyPassphraseType = 0
	PrivateKeyPassphraseType_PRIVATE_KEY_PASSPHRASE_TYPE_FSID        PrivateKeyPassphraseType = 1
)

// Enum value maps for PrivateKeyPassphraseType.
var (
	PrivateKeyPassphraseType_name = map[int32]string{
		0: "PRIVATE_KEY_PASSPHRASE_TYPE_UNSPECIFIED",
		1: "PRIVATE_KEY_PASSPHRASE_TYPE_FSID",
	}
	PrivateKeyPassphraseType_value = map[string]int32{
		"PRIVATE_KEY_PASSPHRASE_TYPE_UNSPECIFIED": 0,
		"PRIVATE_KEY_PASSPHRASE_TYPE_FSID":        1,
	}
)

func (x PrivateKeyPassphraseType) Enum() *PrivateKeyPassphraseType {
	p := new(PrivateKeyPassphraseType)
	*p = x
	return p
}

func (x PrivateKeyPassphraseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PrivateKeyPassphraseType) Descriptor() protoreflect.EnumDescriptor {
	return file_devcfg_devcfg_proto_enumTypes[8].Descriptor()
}

func (PrivateKeyPassphraseType) Type() protoreflect.EnumType {
	return &file_devcfg_devcfg_proto_enumTypes[8]
}

func (x PrivateKeyPassphraseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PrivateKeyPassphraseType.Descriptor instead.
func (PrivateKeyPassphraseType) EnumDescriptor() ([]byte, []int) {
	return file_devcfg_devcfg_proto_rawDescGZIP(), []int{8}
}

type EthernetServices struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Services map[string]*EthernetService `protobuf:"bytes,1,rep,name=services,proto3" json:"services,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *EthernetServices) Reset() {
	*x = EthernetServices{}
	if protoimpl.UnsafeEnabled {
		mi := &file_devcfg_devcfg_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthernetServices) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthernetServices) ProtoMessage() {}

func (x *EthernetServices) ProtoReflect() protoreflect.Message {
	mi := &file_devcfg_devcfg_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthernetServices.ProtoReflect.Descriptor instead.
func (*EthernetServices) Descriptor() ([]byte, []int) {
	return file_devcfg_devcfg_proto_rawDescGZIP(), []int{0}
}

func (x *EthernetServices) GetServices() map[string]*EthernetService {
	if x != nil {
		return x.Services
	}
	return nil
}

type Ipv4ConfigSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Network string `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	Netmask string `protobuf:"bytes,2,opt,name=netmask,proto3" json:"netmask,omitempty"`
	Gateway string `protobuf:"bytes,3,opt,name=gateway,proto3" json:"gateway,omitempty"`
}

func (x *Ipv4ConfigSettings) Reset() {
	*x = Ipv4ConfigSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_devcfg_devcfg_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ipv4ConfigSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ipv4ConfigSettings) ProtoMessage() {}

func (x *Ipv4ConfigSettings) ProtoReflect() protoreflect.Message {
	mi := &file_devcfg_devcfg_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ipv4ConfigSettings.ProtoReflect.Descriptor instead.
func (*Ipv4ConfigSettings) Descriptor() ([]byte, []int) {
	return file_devcfg_devcfg_proto_rawDescGZIP(), []int{1}
}

func (x *Ipv4ConfigSettings) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *Ipv4ConfigSettings) GetNetmask() string {
	if x != nil {
		return x.Netmask
	}
	return ""
}

func (x *Ipv4ConfigSettings) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

type Ipv4Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     Ipv4ConfigType      `protobuf:"varint,1,opt,name=type,proto3,enum=timeterm_proto.devcfg.Ipv4ConfigType" json:"type,omitempty"`
	Settings *Ipv4ConfigSettings `protobuf:"bytes,2,opt,name=settings,proto3" json:"settings,omitempty"`
}

func (x *Ipv4Config) Reset() {
	*x = Ipv4Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_devcfg_devcfg_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ipv4Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ipv4Config) ProtoMessage() {}

func (x *Ipv4Config) ProtoReflect() protoreflect.Message {
	mi := &file_devcfg_devcfg_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ipv4Config.ProtoReflect.Descriptor instead.
func (*Ipv4Config) Descriptor() ([]byte, []int) {
	return file_devcfg_devcfg_proto_rawDescGZIP(), []int{2}
}

func (x *Ipv4Config) GetType() Ipv4ConfigType {
	if x != nil {
		return x.Type
	}
	return Ipv4ConfigType_IPV4_CONFIG_TYPE_UNSPECIFIED
}

func (x *Ipv4Config) GetSettings() *Ipv4ConfigSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type Ipv6ConfigSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Network      string `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	PrefixLength uint64 `protobuf:"varint,2,opt,name=prefix_length,json=prefixLength,proto3" json:"prefix_length,omitempty"`
	Gateway      string `protobuf:"bytes,3,opt,name=gateway,proto3" json:"gateway,omitempty"`
}

func (x *Ipv6ConfigSettings) Reset() {
	*x = Ipv6ConfigSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_devcfg_devcfg_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ipv6ConfigSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ipv6ConfigSettings) ProtoMessage() {}

func (x *Ipv6ConfigSettings) ProtoReflect() protoreflect.Message {
	mi := &file_devcfg_devcfg_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ipv6ConfigSettings.ProtoReflect.Descriptor instead.
func (*Ipv6ConfigSettings) Descriptor() ([]byte, []int) {
	return file_devcfg_devcfg_proto_rawDescGZIP(), []int{3}
}

func (x *Ipv6ConfigSettings) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *Ipv6ConfigSettings) GetPrefixLength() uint64 {
	if x != nil {
		return x.PrefixLength
	}
	return 0
}

func (x *Ipv6ConfigSettings) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

type Ipv6Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     Ipv6ConfigType      `protobuf:"varint,1,opt,name=type,proto3,enum=timeterm_proto.devcfg.Ipv6ConfigType" json:"type,omitempty"`
	Settings *Ipv6ConfigSettings `protobuf:"bytes,2,opt,name=settings,proto3" json:"settings,omitempty"`
}

func (x *Ipv6Config) Reset() {
	*x = Ipv6Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_devcfg_devcfg_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ipv6Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ipv6Config) ProtoMessage() {}

func (x *Ipv6Config) ProtoReflect() protoreflect.Message {
	mi := &file_devcfg_devcfg_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ipv6Config.ProtoReflect.Descriptor instead.
func (*Ipv6Config) Descriptor() ([]byte, []int) {
	return file_devcfg_devcfg_proto_rawDescGZIP(), []int{4}
}

func (x *Ipv6Config) GetType() Ipv6ConfigType {
	if x != nil {
		return x.Type
	}
	return Ipv6ConfigType_IPV6_CONFIG_TYPE_UNSPECIFIED
}

func (x *Ipv6Config) GetSettings() *Ipv6ConfigSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type EthernetService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                     EthernetServiceType      `protobuf:"varint,1,opt,name=type,proto3,enum=timeterm_proto.devcfg.EthernetServiceType" json:"type,omitempty"`
	Ipv4Config               *Ipv4Config              `protobuf:"bytes,2,opt,name=ipv4_config,json=ipv4Config,proto3" json:"ipv4_config,omitempty"`
	Ipv6Config               *Ipv6Config              `protobuf:"bytes,3,opt,name=ipv6_config,json=ipv6Config,proto3" json:"ipv6_config,omitempty"`
	Ipv6Privacy              Ipv6Privacy              `protobuf:"varint,4,opt,name=ipv6_privacy,json=ipv6Privacy,proto3,enum=timeterm_proto.devcfg.Ipv6Privacy" json:"ipv6_privacy,omitempty"`
	Mac                      string                   `protobuf:"bytes,5,opt,name=mac,proto3" json:"mac,omitempty"`
	Nameservers              []string                 `protobuf:"bytes,6,rep,name=nameservers,proto3" json:"nameservers,omitempty"`
	SearchDomains            []string                 `protobuf:"bytes,7,rep,name=search_domains,json=searchDomains,proto3" json:"search_domains,omitempty"`
	Timeservers              []string                 `protobuf:"bytes,8,rep,name=timeservers,proto3" json:"timeservers,omitempty"`
	Domain                   string                   `protobuf:"bytes,9,opt,name=domain,proto3" json:"domain,omitempty"`
	Name                     string                   `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	Ssid                     string                   `protobuf:"bytes,11,opt,name=ssid,proto3" json:"ssid,omitempty"`
	Passphrase               string                   `protobuf:"bytes,12,opt,name=passphrase,proto3" json:"passphrase,omitempty"`
	Security                 Security                 `protobuf:"varint,13,opt,name=security,proto3,enum=timeterm_proto.devcfg.Security" json:"security,omitempty"`
	IsHidden                 bool                     `protobuf:"varint,14,opt,name=is_hidden,json=isHidden,proto3" json:"is_hidden,omitempty"`
	Eap                      Eap                      `protobuf:"varint,15,opt,name=eap,proto3,enum=timeterm_proto.devcfg.Eap" json:"eap,omitempty"`
	CaCert                   []byte                   `protobuf:"bytes,16,opt,name=ca_cert,json=caCert,proto3" json:"ca_cert,omitempty"`
	CaCertType               CaCertType               `protobuf:"varint,17,opt,name=ca_cert_type,json=caCertType,proto3,enum=timeterm_proto.devcfg.CaCertType" json:"ca_cert_type,omitempty"`
	PrivateKey               []byte                   `protobuf:"bytes,18,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	PrivateKeyType           PrivateKeyType           `protobuf:"varint,19,opt,name=private_key_type,json=privateKeyType,proto3,enum=timeterm_proto.devcfg.PrivateKeyType" json:"private_key_type,omitempty"`
	PrivateKeyPassphrase     string                   `protobuf:"bytes,20,opt,name=private_key_passphrase,json=privateKeyPassphrase,proto3" json:"private_key_passphrase,omitempty"`
	PrivateKeyPassphraseType PrivateKeyPassphraseType `protobuf:"varint,21,opt,name=private_key_passphrase_type,json=privateKeyPassphraseType,proto3,enum=timeterm_proto.devcfg.PrivateKeyPassphraseType" json:"private_key_passphrase_type,omitempty"`
	Identity                 string                   `protobuf:"bytes,22,opt,name=identity,proto3" json:"identity,omitempty"`
	AnonymousIdentity        string                   `protobuf:"bytes,23,opt,name=anonymous_identity,json=anonymousIdentity,proto3" json:"anonymous_identity,omitempty"`
	SubjectMatch             string                   `protobuf:"bytes,24,opt,name=subject_match,json=subjectMatch,proto3" json:"subject_match,omitempty"`
	AltSubjectMatch          string                   `protobuf:"bytes,25,opt,name=alt_subject_match,json=altSubjectMatch,proto3" json:"alt_subject_match,omitempty"`
	DomainSuffixMatch        string                   `protobuf:"bytes,26,opt,name=domain_suffix_match,json=domainSuffixMatch,proto3" json:"domain_suffix_match,omitempty"`
	DomainMatch              string                   `protobuf:"bytes,27,opt,name=domain_match,json=domainMatch,proto3" json:"domain_match,omitempty"`
	IsPhase_2EapBased        bool                     `protobuf:"varint,28,opt,name=is_phase_2_eap_based,json=isPhase2EapBased,proto3" json:"is_phase_2_eap_based,omitempty"`
}

func (x *EthernetService) Reset() {
	*x = EthernetService{}
	if protoimpl.UnsafeEnabled {
		mi := &file_devcfg_devcfg_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthernetService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthernetService) ProtoMessage() {}

func (x *EthernetService) ProtoReflect() protoreflect.Message {
	mi := &file_devcfg_devcfg_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthernetService.ProtoReflect.Descriptor instead.
func (*EthernetService) Descriptor() ([]byte, []int) {
	return file_devcfg_devcfg_proto_rawDescGZIP(), []int{5}
}

func (x *EthernetService) GetType() EthernetServiceType {
	if x != nil {
		return x.Type
	}
	return EthernetServiceType_ETHERNET_SERVICE_TYPE_UNSPECIFIED
}

func (x *EthernetService) GetIpv4Config() *Ipv4Config {
	if x != nil {
		return x.Ipv4Config
	}
	return nil
}

func (x *EthernetService) GetIpv6Config() *Ipv6Config {
	if x != nil {
		return x.Ipv6Config
	}
	return nil
}

func (x *EthernetService) GetIpv6Privacy() Ipv6Privacy {
	if x != nil {
		return x.Ipv6Privacy
	}
	return Ipv6Privacy_IPV6_PRIVACY_UNSPECIFIED
}

func (x *EthernetService) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *EthernetService) GetNameservers() []string {
	if x != nil {
		return x.Nameservers
	}
	return nil
}

func (x *EthernetService) GetSearchDomains() []string {
	if x != nil {
		return x.SearchDomains
	}
	return nil
}

func (x *EthernetService) GetTimeservers() []string {
	if x != nil {
		return x.Timeservers
	}
	return nil
}

func (x *EthernetService) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *EthernetService) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EthernetService) GetSsid() string {
	if x != nil {
		return x.Ssid
	}
	return ""
}

func (x *EthernetService) GetPassphrase() string {
	if x != nil {
		return x.Passphrase
	}
	return ""
}

func (x *EthernetService) GetSecurity() Security {
	if x != nil {
		return x.Security
	}
	return Security_SECURITY_UNSPECIFIED
}

func (x *EthernetService) GetIsHidden() bool {
	if x != nil {
		return x.IsHidden
	}
	return false
}

func (x *EthernetService) GetEap() Eap {
	if x != nil {
		return x.Eap
	}
	return Eap_EAP_TLS
}

func (x *EthernetService) GetCaCert() []byte {
	if x != nil {
		return x.CaCert
	}
	return nil
}

func (x *EthernetService) GetCaCertType() CaCertType {
	if x != nil {
		return x.CaCertType
	}
	return CaCertType_CA_CERT_TYPE_UNSPECIFIED
}

func (x *EthernetService) GetPrivateKey() []byte {
	if x != nil {
		return x.PrivateKey
	}
	return nil
}

func (x *EthernetService) GetPrivateKeyType() PrivateKeyType {
	if x != nil {
		return x.PrivateKeyType
	}
	return PrivateKeyType_PRIVATE_KEY_TYPE_UNSPECIFIED
}

func (x *EthernetService) GetPrivateKeyPassphrase() string {
	if x != nil {
		return x.PrivateKeyPassphrase
	}
	return ""
}

func (x *EthernetService) GetPrivateKeyPassphraseType() PrivateKeyPassphraseType {
	if x != nil {
		return x.PrivateKeyPassphraseType
	}
	return PrivateKeyPassphraseType_PRIVATE_KEY_PASSPHRASE_TYPE_UNSPECIFIED
}

func (x *EthernetService) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *EthernetService) GetAnonymousIdentity() string {
	if x != nil {
		return x.AnonymousIdentity
	}
	return ""
}

func (x *EthernetService) GetSubjectMatch() string {
	if x != nil {
		return x.SubjectMatch
	}
	return ""
}

func (x *EthernetService) GetAltSubjectMatch() string {
	if x != nil {
		return x.AltSubjectMatch
	}
	return ""
}

func (x *EthernetService) GetDomainSuffixMatch() string {
	if x != nil {
		return x.DomainSuffixMatch
	}
	return ""
}

func (x *EthernetService) GetDomainMatch() string {
	if x != nil {
		return x.DomainMatch
	}
	return ""
}

func (x *EthernetService) GetIsPhase_2EapBased() bool {
	if x != nil {
		return x.IsPhase_2EapBased
	}
	return false
}

var File_devcfg_devcfg_proto protoreflect.FileDescriptor

var file_devcfg_devcfg_proto_rawDesc = []byte{
	0x0a, 0x13, 0x64, 0x65, 0x76, 0x63, 0x66, 0x67, 0x2f, 0x64, 0x65, 0x76, 0x63, 0x66, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x74, 0x69, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x65, 0x76, 0x63, 0x66, 0x67, 0x22, 0xca, 0x01, 0x0a,
	0x10, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x12, 0x51, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x65, 0x76, 0x63, 0x66, 0x67, 0x2e, 0x45, 0x74, 0x68, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x1a, 0x63, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x65, 0x76, 0x63, 0x66, 0x67, 0x2e, 0x45,
	0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x62, 0x0a, 0x12, 0x49, 0x70, 0x76,
	0x34, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74,
	0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x6d,
	0x61, 0x73, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x22, 0x8e, 0x01,
	0x0a, 0x0a, 0x49, 0x70, 0x76, 0x34, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x39, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x74, 0x69, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x65, 0x76, 0x63,
	0x66, 0x67, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x69, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x65, 0x76, 0x63, 0x66,
	0x67, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x6d,
	0x0a, 0x12, 0x49, 0x70, 0x76, 0x36, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x23,
	0x0a, 0x0d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x22, 0x8e, 0x01,
	0x0a, 0x0a, 0x49, 0x70, 0x76, 0x36, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x39, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x74, 0x69, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x65, 0x76, 0x63,
	0x66, 0x67, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x69, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x65, 0x76, 0x63, 0x66,
	0x67, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x9a,
	0x0a, 0x0a, 0x0f, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2a, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x64, 0x65, 0x76, 0x63, 0x66, 0x67, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x65, 0x76, 0x63, 0x66, 0x67, 0x2e,
	0x49, 0x70, 0x76, 0x34, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x69, 0x70, 0x76, 0x34,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x42, 0x0a, 0x0b, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x69,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x65, 0x76,
	0x63, 0x66, 0x67, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a,
	0x69, 0x70, 0x76, 0x36, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x45, 0x0a, 0x0c, 0x69, 0x70,
	0x76, 0x36, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x22, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x64, 0x65, 0x76, 0x63, 0x66, 0x67, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x63, 0x79, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x36, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x61, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x73,
	0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x73, 0x69, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x12, 0x3b,
	0x0a, 0x08, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1f, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x64, 0x65, 0x76, 0x63, 0x66, 0x67, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x52, 0x08, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x73, 0x5f, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x69, 0x73, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x2c, 0x0a, 0x03, 0x65, 0x61, 0x70, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x6d,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x65, 0x76, 0x63, 0x66, 0x67, 0x2e, 0x45, 0x61,
	0x70, 0x52, 0x03, 0x65, 0x61, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x5f, 0x63, 0x65, 0x72,
	0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x63, 0x61, 0x43, 0x65, 0x72, 0x74, 0x12,
	0x43, 0x0a, 0x0c, 0x63, 0x61, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x6d,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x65, 0x76, 0x63, 0x66, 0x67, 0x2e, 0x43, 0x61,
	0x43, 0x65, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x63, 0x61, 0x43, 0x65, 0x72, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x4f, 0x0a, 0x10, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x25, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x64, 0x65, 0x76, 0x63, 0x66, 0x67, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b,
	0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b,
	0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b,
	0x65, 0x79, 0x50, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x12, 0x6e, 0x0a, 0x1b,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x61, 0x73, 0x73,
	0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2f, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x64, 0x65, 0x76, 0x63, 0x66, 0x67, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x18, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x50, 0x61,
	0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x6e, 0x6f, 0x6e,
	0x79, 0x6d, 0x6f, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x2a, 0x0a, 0x11,
	0x61, 0x6c, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x6c, 0x74, 0x53, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x5f, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x75, 0x66,
	0x66, 0x69, 0x78, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x2e, 0x0a, 0x14, 0x69,
	0x73, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x32, 0x5f, 0x65, 0x61, 0x70, 0x5f, 0x62, 0x61,
	0x73, 0x65, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x50, 0x68, 0x61,
	0x73, 0x65, 0x32, 0x45, 0x61, 0x70, 0x42, 0x61, 0x73, 0x65, 0x64, 0x2a, 0x80, 0x01, 0x0a, 0x13,
	0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x21, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x5f,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x54,
	0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x10, 0x01, 0x12, 0x1e,
	0x0a, 0x1a, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x49, 0x46, 0x49, 0x10, 0x02, 0x2a, 0x84,
	0x01, 0x0a, 0x0e, 0x49, 0x70, 0x76, 0x34, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x20, 0x0a, 0x1c, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x01, 0x12, 0x19, 0x0a,
	0x15, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x44, 0x48, 0x43, 0x50, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x50, 0x56, 0x34,
	0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x55, 0x53,
	0x54, 0x4f, 0x4d, 0x10, 0x03, 0x2a, 0x84, 0x01, 0x0a, 0x0e, 0x49, 0x70, 0x76, 0x36, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x49, 0x50, 0x56, 0x36,
	0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x50,
	0x56, 0x36, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f,
	0x46, 0x46, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x02, 0x12,
	0x1b, 0x0a, 0x17, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x10, 0x03, 0x2a, 0x7c, 0x0a, 0x0b,
	0x49, 0x70, 0x76, 0x36, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x12, 0x1c, 0x0a, 0x18, 0x49,
	0x50, 0x56, 0x36, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x41, 0x43, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x50, 0x56,
	0x36, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x41, 0x43, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x50, 0x52, 0x49,
	0x56, 0x41, 0x43, 0x59, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1a,
	0x0a, 0x16, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x41, 0x43, 0x59, 0x5f, 0x50,
	0x52, 0x45, 0x46, 0x45, 0x52, 0x52, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x73, 0x0a, 0x08, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x10, 0x0a, 0x0c, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x53, 0x4b,
	0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x45, 0x45, 0x45, 0x38, 0x30, 0x32, 0x31, 0x58, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x45,
	0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x03, 0x12, 0x10, 0x0a,
	0x0c, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x57, 0x45, 0x50, 0x10, 0x04, 0x2a,
	0x2e, 0x0a, 0x03, 0x45, 0x61, 0x70, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x41, 0x50, 0x5f, 0x54, 0x4c,
	0x53, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x41, 0x50, 0x5f, 0x54, 0x54, 0x4c, 0x53, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x41, 0x50, 0x5f, 0x50, 0x45, 0x41, 0x50, 0x10, 0x02, 0x2a,
	0x56, 0x0a, 0x0a, 0x43, 0x61, 0x43, 0x65, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a,
	0x18, 0x43, 0x41, 0x5f, 0x43, 0x45, 0x52, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x43,
	0x41, 0x5f, 0x43, 0x45, 0x52, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x4d, 0x10,
	0x01, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x41, 0x5f, 0x43, 0x45, 0x52, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x44, 0x45, 0x52, 0x10, 0x02, 0x2a, 0x80, 0x01, 0x0a, 0x0e, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x52,
	0x49, 0x56, 0x41, 0x54, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14,
	0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x50, 0x45, 0x4d, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54,
	0x45, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x52, 0x10, 0x02,
	0x12, 0x18, 0x0a, 0x14, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x46, 0x58, 0x10, 0x03, 0x2a, 0x6d, 0x0a, 0x18, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72, 0x61,
	0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x27, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54,
	0x45, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x50, 0x48, 0x52, 0x41, 0x53, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x5f, 0x4b,
	0x45, 0x59, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x50, 0x48, 0x52, 0x41, 0x53, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x46, 0x53, 0x49, 0x44, 0x10, 0x01, 0x42, 0x37, 0x5a, 0x35, 0x67, 0x69, 0x74,
	0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x6d,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x67, 0x6f, 0x2f, 0x64, 0x65, 0x76, 0x63, 0x66, 0x67, 0x3b, 0x64, 0x65, 0x76, 0x63, 0x66, 0x67,
	0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_devcfg_devcfg_proto_rawDescOnce sync.Once
	file_devcfg_devcfg_proto_rawDescData = file_devcfg_devcfg_proto_rawDesc
)

func file_devcfg_devcfg_proto_rawDescGZIP() []byte {
	file_devcfg_devcfg_proto_rawDescOnce.Do(func() {
		file_devcfg_devcfg_proto_rawDescData = protoimpl.X.CompressGZIP(file_devcfg_devcfg_proto_rawDescData)
	})
	return file_devcfg_devcfg_proto_rawDescData
}

var file_devcfg_devcfg_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_devcfg_devcfg_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_devcfg_devcfg_proto_goTypes = []interface{}{
	(EthernetServiceType)(0),      // 0: timeterm_proto.devcfg.EthernetServiceType
	(Ipv4ConfigType)(0),           // 1: timeterm_proto.devcfg.Ipv4ConfigType
	(Ipv6ConfigType)(0),           // 2: timeterm_proto.devcfg.Ipv6ConfigType
	(Ipv6Privacy)(0),              // 3: timeterm_proto.devcfg.Ipv6Privacy
	(Security)(0),                 // 4: timeterm_proto.devcfg.Security
	(Eap)(0),                      // 5: timeterm_proto.devcfg.Eap
	(CaCertType)(0),               // 6: timeterm_proto.devcfg.CaCertType
	(PrivateKeyType)(0),           // 7: timeterm_proto.devcfg.PrivateKeyType
	(PrivateKeyPassphraseType)(0), // 8: timeterm_proto.devcfg.PrivateKeyPassphraseType
	(*EthernetServices)(nil),      // 9: timeterm_proto.devcfg.EthernetServices
	(*Ipv4ConfigSettings)(nil),    // 10: timeterm_proto.devcfg.Ipv4ConfigSettings
	(*Ipv4Config)(nil),            // 11: timeterm_proto.devcfg.Ipv4Config
	(*Ipv6ConfigSettings)(nil),    // 12: timeterm_proto.devcfg.Ipv6ConfigSettings
	(*Ipv6Config)(nil),            // 13: timeterm_proto.devcfg.Ipv6Config
	(*EthernetService)(nil),       // 14: timeterm_proto.devcfg.EthernetService
	nil,                           // 15: timeterm_proto.devcfg.EthernetServices.ServicesEntry
}
var file_devcfg_devcfg_proto_depIdxs = []int32{
	15, // 0: timeterm_proto.devcfg.EthernetServices.services:type_name -> timeterm_proto.devcfg.EthernetServices.ServicesEntry
	1,  // 1: timeterm_proto.devcfg.Ipv4Config.type:type_name -> timeterm_proto.devcfg.Ipv4ConfigType
	10, // 2: timeterm_proto.devcfg.Ipv4Config.settings:type_name -> timeterm_proto.devcfg.Ipv4ConfigSettings
	2,  // 3: timeterm_proto.devcfg.Ipv6Config.type:type_name -> timeterm_proto.devcfg.Ipv6ConfigType
	12, // 4: timeterm_proto.devcfg.Ipv6Config.settings:type_name -> timeterm_proto.devcfg.Ipv6ConfigSettings
	0,  // 5: timeterm_proto.devcfg.EthernetService.type:type_name -> timeterm_proto.devcfg.EthernetServiceType
	11, // 6: timeterm_proto.devcfg.EthernetService.ipv4_config:type_name -> timeterm_proto.devcfg.Ipv4Config
	13, // 7: timeterm_proto.devcfg.EthernetService.ipv6_config:type_name -> timeterm_proto.devcfg.Ipv6Config
	3,  // 8: timeterm_proto.devcfg.EthernetService.ipv6_privacy:type_name -> timeterm_proto.devcfg.Ipv6Privacy
	4,  // 9: timeterm_proto.devcfg.EthernetService.security:type_name -> timeterm_proto.devcfg.Security
	5,  // 10: timeterm_proto.devcfg.EthernetService.eap:type_name -> timeterm_proto.devcfg.Eap
	6,  // 11: timeterm_proto.devcfg.EthernetService.ca_cert_type:type_name -> timeterm_proto.devcfg.CaCertType
	7,  // 12: timeterm_proto.devcfg.EthernetService.private_key_type:type_name -> timeterm_proto.devcfg.PrivateKeyType
	8,  // 13: timeterm_proto.devcfg.EthernetService.private_key_passphrase_type:type_name -> timeterm_proto.devcfg.PrivateKeyPassphraseType
	14, // 14: timeterm_proto.devcfg.EthernetServices.ServicesEntry.value:type_name -> timeterm_proto.devcfg.EthernetService
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_devcfg_devcfg_proto_init() }
func file_devcfg_devcfg_proto_init() {
	if File_devcfg_devcfg_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_devcfg_devcfg_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthernetServices); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_devcfg_devcfg_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ipv4ConfigSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_devcfg_devcfg_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ipv4Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_devcfg_devcfg_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ipv6ConfigSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_devcfg_devcfg_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ipv6Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_devcfg_devcfg_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthernetService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_devcfg_devcfg_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_devcfg_devcfg_proto_goTypes,
		DependencyIndexes: file_devcfg_devcfg_proto_depIdxs,
		EnumInfos:         file_devcfg_devcfg_proto_enumTypes,
		MessageInfos:      file_devcfg_devcfg_proto_msgTypes,
	}.Build()
	File_devcfg_devcfg_proto = out.File
	file_devcfg_devcfg_proto_rawDesc = nil
	file_devcfg_devcfg_proto_goTypes = nil
	file_devcfg_devcfg_proto_depIdxs = nil
}
